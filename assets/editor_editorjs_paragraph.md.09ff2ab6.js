import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.69210375.js";const b=JSON.parse('{"title":"editor.js 源码解析：paragraph 段落插件渲染流程","description":"","frontmatter":{},"headers":[],"relativePath":"editor/editorjs/paragraph.md","lastUpdated":1711638490000}'),p={name:"editor/editorjs/paragraph.md"},e=l(`<h1 id="editor-js-源码解析-paragraph-段落插件渲染流程" tabindex="-1">editor.js 源码解析：paragraph 段落插件渲染流程 <a class="header-anchor" href="#editor-js-源码解析-paragraph-段落插件渲染流程" aria-label="Permalink to &quot;editor.js 源码解析：paragraph 段落插件渲染流程&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p><a href="https://editorjs.io/" target="_blank" rel="noreferrer">Editor.js</a> 是一个 Block-Styled 块编辑器，以 JSON 格式输出数据的富文本和媒体编辑器。它，由“块”组成，完全模块化，例如段落、标题、图片都是块，可以进一步地编写自己的插件来扩展编辑器功能。</p><p>下面介绍段落在富文本编辑器的渲染流程，了解 editor.js 是如何工作的，知道自己编写的插件是怎么运行的。</p><h2 id="开始使用" tabindex="-1">开始使用 <a class="header-anchor" href="#开始使用" aria-label="Permalink to &quot;开始使用&quot;">​</a></h2><p>阅读 <a href="https://editorjs.io/getting-started/" target="_blank" rel="noreferrer">editor.js</a> 官网文档，写的挺清晰，使用段落插件作为简单的示例，调试 editor.js 的工作过程</p><p>使用挺简单，实例化 <code>EditorJS</code>, 数据内容使用 <code>data</code> 存储，遍历 blocks 数组生成 DOM 内容，挂载在 <code>holder</code> id 上</p><div class="language-JS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> EditorJS </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@editorjs/editorjs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> editor </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">EditorJS</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">holder</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">editorjs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">blocks</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">paragraph</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#F07178;">text</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello world</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="editorjs-核心类" tabindex="-1">Editorjs 核心类 <a class="header-anchor" href="#editorjs-核心类" aria-label="Permalink to &quot;Editorjs 核心类&quot;">​</a></h2><p>实例化 <code>EditorJS</code> 内部调用 <code>Core</code> 实例化富文本核心类</p><p><img src="https://files.mdnice.com/user/26477/a121deb0-96ed-4b7c-86aa-eb9f3fa712fa.png" alt=""></p><p>在 Core 构造器 <code>constructor</code> 执行 <code>Promise.resolve</code>，从这里可以了解到 <code>editor.js</code> 采用的是异步渲染的方式</p><p>好处是：提升页面渲染性能，数据量大达到上千行万行，不会阻塞页面的渲染</p><p>需要注意点，在同步执行过程中，拿不到渲染的 DOM，需要在异步队列执行后访问，也就是 <code>onReady</code> 异步函数后</p><p>在异步函数，执行流程分为以下 4 步：</p><ol><li>validate：校验挂载的 DOM 是否合法</li><li>init：注册内置模块，管理模块</li><li>start：模块 prepare 方法，做一些准备工作</li><li>render：渲染编辑器内容</li></ol><div class="language-JS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Core</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">config</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">configuration</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">config</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">validate</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">init</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">start</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">render</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">onReady</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">error</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#BABED8;">_</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Editor.js is not ready because of </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">error</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * Reject this.isReady promise</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">onFail</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="渲染流程" tabindex="-1">渲染流程 <a class="header-anchor" href="#渲染流程" aria-label="Permalink to &quot;渲染流程&quot;">​</a></h2><h3 id="注册内置模块" tabindex="-1">注册内置模块 <a class="header-anchor" href="#注册内置模块" aria-label="Permalink to &quot;注册内置模块&quot;">​</a></h3><p>执行 <code>init</code> 方法，主要做两件事件；</p><ul><li>加载内置模块实例化</li><li>配置模块，实现模块间通信</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">public </span><span style="color:#82AAFF;">init</span><span style="color:#BABED8;">(): </span><span style="color:#89DDFF;">void</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 加载模块实例化</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">constructModules</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 配置模块</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">configureModules</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>1、<code>constructModules</code> 方法加载内置的模块，遍历模块 <code>new</code> 实例化，添加到 <code>this.moduleInstances</code> 对象，<code>moduleInstances</code> 管理所有模块方法 API</p><p><img src="https://files.mdnice.com/user/26477/0e81b531-0714-441f-adfd-840b766a476b.png" alt=""></p><p>2、<code>configureModules</code> 配置模块，实现不同模块间的数据通信</p><p>比如说，要在 <code>BlockManager</code> 模块调用 <code>EventsAPI</code> 模块的实例化方法，做法是在当前模块添加其他所有的模块到 <code>Editor</code> 对象上</p><div class="language-JS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"></span>
<span class="line"><span style="color:#BABED8;">private </span><span style="color:#82AAFF;">configureModules</span><span style="color:#BABED8;">(): </span><span style="color:#89DDFF;">void</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 遍历 moduleInstances ，通过 getModulesDiff diff 对比，赋值其他模块的对象给 state</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">moduleInstances</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">hasOwnProperty</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">moduleInstances</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">moduleInstances</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getModulesDiff</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 对比获取非当前模块对象</span></span>
<span class="line"><span style="color:#BABED8;">private </span><span style="color:#82AAFF;">getModulesDiff</span><span style="color:#BABED8;">(name: string): EditorModules </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">diff</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">moduleName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">moduleInstances</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">moduleName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">continue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">diff</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">moduleName</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">moduleInstances</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">moduleName</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">diff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>所有的模块都继承于 <code>Module</code> 模块，它内部有个方法，设置 <code>state</code> 会添加模块对象在 <code>Editor</code> 属性上，这样 <code>Editor</code> 就存储了其他模块的数据</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">public set </span><span style="color:#82AAFF;">state</span><span style="color:#BABED8;">(Editor: EditorModules) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">Editor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">Editor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="start-启动模块" tabindex="-1">start 启动模块 <a class="header-anchor" href="#start-启动模块" aria-label="Permalink to &quot;start 启动模块&quot;">​</a></h3><p>有些模块需要做一些准备工作，比如 tools 行内工具 UI DOM 创建 ，创建编辑器的容器 DOM，需要提前执行，所以将这些模块列出来按照顺序执行。</p><p>使用 <code>reduce</code> 和 <code>async/await</code> 控制顺序执行 <code>prepare</code> 方法</p><p><img src="https://files.mdnice.com/user/26477/d1694915-db5d-4636-abe2-1242324b336f.png" alt=""></p><h3 id="render-渲染内容" tabindex="-1">render 渲染内容 <a class="header-anchor" href="#render-渲染内容" aria-label="Permalink to &quot;render 渲染内容&quot;">​</a></h3><p>渲染内容使用实例化模块 <code>Renderer</code> 的 <code>render</code> 方法渲染</p><p><img src="https://files.mdnice.com/user/26477/a0be0451-5659-42df-9b37-10198d100640.png" alt=""></p><p><strong>渲染流程</strong></p><p>1、 遍历 <code>blocksData</code> 数组，调用 <code>BlockManager</code> 模块 <code>composeBlock</code> 方法，它会为段落实例化一个 <code>Block</code></p><p><img src="https://files.mdnice.com/user/26477/99cda2da-6904-4e53-831d-1c152613487c.png" alt=""></p><p><img src="https://files.mdnice.com/user/26477/d920e069-33eb-4439-88c1-8664b0144302.png" alt=""></p><p>段落 Block 实例化内部调用 <code>tool.create</code> 方法，此时就开始执行 <strong>段落插件</strong> 的 <code>constructor</code> 实例化逻辑，实例化对象添加到 <code>toolInstance</code> 属性</p><p><img src="https://files.mdnice.com/user/26477/b8baed44-67ba-480c-aac9-0345a1cf20e2.png" alt=""></p><p><img src="https://files.mdnice.com/user/26477/b9ffa8dd-120a-40e7-941b-bbfa55ef246d.png" alt=""></p><p><img src="https://files.mdnice.com/user/26477/f56bf628-94dd-4c71-b75f-b47404acf2c0.png" alt=""></p><p>2、段落 DOM 渲染</p><p>段落插件必须提供一个 <code>render</code> 函数，在实例化 Block 会调用 <code>compose</code> 函数创建 DOM 赋值 <code>holder</code></p><p>同时也会创建 tunes 转换模块，如上下移动、删除块</p><p><img src="https://files.mdnice.com/user/26477/0a08aba1-03d8-4ee4-bbf2-e2724cbaa86d.png" alt=""></p><p><img src="https://files.mdnice.com/user/26477/e7cf6d1d-9d57-47a8-81f9-76e1299ed103.png" alt=""></p><p>3、段落绑定事件</p><p>在 <code>composeBlock</code> 创建完 dom 后，会给 dom 绑定事件，这里使用了 <code>requestIdleCallback</code> API 在 2 秒后浏览器空闲时间执行</p><p><img src="https://files.mdnice.com/user/26477/9f8c2d0c-6216-481c-82be-fe059a6a4617.png" alt=""></p><p><img src="https://files.mdnice.com/user/26477/cfefcf2b-b5e4-4500-a126-74753a56be67.png" alt=""></p><h3 id="挂载-dom" tabindex="-1">挂载 DOM <a class="header-anchor" href="#挂载-dom" aria-label="Permalink to &quot;挂载 DOM&quot;">​</a></h3><p>初始化所有的 <code>blocks</code> 后，使用 <code>BlockManager</code> 来管理，执行 <code>BlockManager.insertMany(blocks)</code> ，遍历 blocks 取出段落的 DOM（在 holder） 添加到文档片段，挂载到页面上</p><p><img src="https://files.mdnice.com/user/26477/1a01d5a3-bf36-4b0c-8622-1d2b4f970425.png" alt=""></p><p><img src="https://files.mdnice.com/user/26477/dc3d68f1-2c95-4164-874f-5ace108555f3.png" alt=""></p><h2 id="保存校验-json" tabindex="-1">保存校验 json <a class="header-anchor" href="#保存校验-json" aria-label="Permalink to &quot;保存校验 json&quot;">​</a></h2><p>editor.js 提供 <code>save</code> 方法获取编辑器的 JSON 数据</p><p>1、调用 Saver 模块的 <code>save</code> 方法</p><p>save 方法会遍历 <code>blocks</code> 所有的块，调用 getSavedData 获取块的数据，添加到 <code>chainData</code> 数组，getSavedData 方法处理保存和校验的逻辑</p><p><img src="https://files.mdnice.com/user/26477/35de0b9d-d761-4849-932e-ac72b001def1.png" alt=""></p><p><img src="https://files.mdnice.com/user/26477/c41226e2-130e-433c-a955-1901bb356d60.png" alt=""></p><p>2、保存逻辑</p><p>save 执行段落 block <code>save</code> 方法，调用段落插件的 <code>save</code> 方法，获取段落的数据</p><p><img src="https://files.mdnice.com/user/26477/3dcb5ebb-258f-4696-84f8-38cc375fe3c0.png" alt=""></p><p>3、validate 校验</p><p>判断段落插件是否有定义 <code>validate</code> 方法，有则将 data 数据进行校验，同时 <code>sanitizeBlocks</code> 方法根据 <code>sanitizeConfig</code> 配置对数据做一层过滤</p><p><img src="https://files.mdnice.com/user/26477/f6719f51-b730-430d-b002-bb2f2397be21.png" alt=""></p><p><img src="https://files.mdnice.com/user/26477/dd8f94dd-dc1b-441b-af3b-348f08fb7272.png" alt=""></p><h3 id="输出数据" tabindex="-1">输出数据 <a class="header-anchor" href="#输出数据" aria-label="Permalink to &quot;输出数据&quot;">​</a></h3><p>最后调用 <code>makeOutput</code> ，根据校验条件 <code>isValid</code> 如果通过则添加到 <code>blocks</code> 数组返回</p><p><img src="https://files.mdnice.com/user/26477/370754df-11a2-4b68-afef-7016fedfa262.png" alt=""></p><p>makeOutput 输出数据对象</p><p><img src="https://files.mdnice.com/user/26477/ce328be5-8c28-4596-be0a-cf3ca4ac3584.png" alt=""></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><code>editor.js</code> 是一个 DOM 操作的富文本编辑器，每一个块是 <code>contenteditable</code> 编辑区域，用一个 Block 块定义表示，使用 <code>managerBlock</code> 模块管理所有的 Block 块。工作过程，会先加载内置模块，对一些模块执行 <code>prepare</code> 准备工作，调用 <code>render</code> 遍历 Block 渲染。</p><p>输出 JSON 数据，遍历所有的 Block，调用插件提供的 <code>save</code> 保存和 <code>validate</code> 方法进行过滤，输出 <code>data</code> 对象</p>`,78),o=[e];function c(r,t,i,d,F,y){return a(),n("div",null,o)}const m=s(p,[["render",c]]);export{b as __pageData,m as default};
