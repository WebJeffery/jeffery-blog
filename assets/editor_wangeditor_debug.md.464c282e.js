import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.69210375.js";const o="/jeffery-blog/assets/debug1.caf7a1f1.png",l="/jeffery-blog/assets/debug2.e1838c07.png",p="/jeffery-blog/assets/debug3.4bc34b05.png",t="/jeffery-blog/assets/debug4.e1c92f8d.png",r="/jeffery-blog/assets/debug5.b651dcbf.png",c="/jeffery-blog/assets/debug6.3876308b.png",i="/jeffery-blog/assets/debug7.9f326fb9.png",d="/jeffery-blog/assets/debug8.bf4eff2c.png",y="/jeffery-blog/assets/debug9.970cd78f.png",D="/jeffery-blog/assets/debug10.45dfd28d.png",F="/jeffery-blog/assets/debug11.218661bd.png",b="/jeffery-blog/assets/debug12.4681485c.png",g="/jeffery-blog/assets/debug13.f3aed02c.png",m="/jeffery-blog/assets/debug14.83b00850.png",h="/jeffery-blog/assets/debug15.346d092b.png",u="/jeffery-blog/assets/debug16.9b00c053.png",f="/jeffery-blog/assets/debug17.c8d53f2e.png",B="/jeffery-blog/assets/debug18.ee0d1025.png",P=JSON.parse('{"title":"阅读调试及分析 wandEditor 开源项目","description":"","frontmatter":{},"headers":[],"relativePath":"editor/wangeditor/debug.md","lastUpdated":1711638490000}'),E={name:"editor/wangeditor/debug.md"},A=n(`<h1 id="阅读调试及分析-wandeditor-开源项目" tabindex="-1">阅读调试及分析 wandEditor 开源项目 <a class="header-anchor" href="#阅读调试及分析-wandeditor-开源项目" aria-label="Permalink to &quot;阅读调试及分析 wandEditor 开源项目&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>开发富文本编辑器， <a href="https://github.com/wangeditor-team/wangEditor" target="_blank" rel="noreferrer">wangEditor</a> 是一个比较好的借鉴项目，通过阅读 wangEditor 源码深入理解富文本编辑器的实现原理、设计思想和技术选型。</p><p>例如</p><ul><li>为了减少造轮子，实现富文本复杂的功能，引入 <code>slate.js</code> 框架</li><li>为了摆脱框架的依赖，使用 <code>snabbdom</code> 实现 <code>slate-react</code> 视图层，同时 diff 更新提升性能</li><li>为了项目的扩展性和维护性，使用 lerna 做代码管理，将视频、表格复杂的功能模块拆分到子包</li><li>设计插件机制，扩展富文本的功能，满足定制化功能</li></ul><p>阅读源码更重要的是，在开发产品需求，发现开源项目有 bug，作者来不及修复，需要更改源码，这时可以 fork 一份代码下来，进行二次开发，实现产品的定制化需求</p><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><p>克隆项目</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">git clone </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//github.com/wangeditor-team/wangEditor</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>阅读项目的 <a href="https://github.com/wangeditor-team/wangEditor/blob/master/docs/dev.md" target="_blank" rel="noreferrer">开发文档</a></p><ol><li>进入 wangEditor 目录</li><li>安装所有依赖 <code>yarn bootstrap</code></li><li>打包所有模块 <code>yarn dev</code> 或者 <code>yarn build</code>，为了方便调试运行前者</li></ol><p>注：在我 Mac 电脑 node 运行版本 <code>16.10.0</code></p><p><strong>运行 demo</strong></p><p>进入 <code>packages/editor</code> 目录，运行 <code>yarn example</code> ，浏览器打开 <code>http://localhost:8881/examples/</code>，看到下面的目录界面，我选择 simple-mode 路径，可以编辑查看修改后的数据结构</p><table><thead><tr><th>example 目录界面</th><th>simple-mode 页面</th></tr></thead><tbody><tr><td><img src="`+o+'" alt=""></td><td><img src="'+l+'" alt=""></td></tr></tbody></table><h2 id="源码调试" tabindex="-1">源码调试 <a class="header-anchor" href="#源码调试" aria-label="Permalink to &quot;源码调试&quot;">​</a></h2><h3 id="入口文件" tabindex="-1">入口文件 <a class="header-anchor" href="#入口文件" aria-label="Permalink to &quot;入口文件&quot;">​</a></h3><p>在 <code>simple-mode</code> html 文件 <code>createEditor</code> 方法上面打上 <code>debugger</code> 断点，打开浏览器控制台，刷新界面，出现下面的调试界面</p><p>文件路径 packages/editor/examples/simple-mode.html</p><p><img src="'+p+'" alt=""></p><p>那么如何调试进入 createEditor 方法呢，我常用的一个调试技巧是：</p><p><strong>将鼠标悬浮在 createEditor 方法上，出现一个提示框，点击 FunctionLocation 文件路径，可以跳转到对应源码的文件位置</strong></p><p><img src="'+t+'" alt=""></p><p>定位到 <code>createEditor</code> 方法位置，接着在 <code>coreCreateEditor</code> 方法打上断点，继续执行</p><p><img src="'+r+'" alt=""></p><p>同样根据上面的步骤，定位到 coreCreateEditor 源码位置，在方法执行前打上断点</p><p>从下面可以看到 coreCreateEditor 方法是实例化富文本的执行函数，主要做的事情：</p><p><img src="'+c+`" alt=""></p><p>1、调用 slate.js <code>createEditor</code> 方法创建 editor 对象，wangEditor 基于它提供的插件机制，封装了多个插件，类似 koa 洋葱模型</p><p>它的插件机制也很容易理解，就是往 editor 对象上添加方法，或者重写对象方法，有点类似 Vue mount 方法实现</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> withContent </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">editor</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">e</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">editor</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">insertText</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">e</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insertText</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">text</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">readOnly</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getConfig</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">readOnly</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">insertText</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">text</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">e</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>插件介绍</p><ul><li>withMaxLength ：处理编辑文本内容长度计算</li><li>withEmitter ：注册自定义事件，数据通信方案 on/once/off/emit</li><li>withSelection：选中/取消选中节点、光标等处理</li><li>withContent ：编辑内容的处理</li><li>withConfig：富文本的配置方法封装</li><li>withDOM：DOM 操作方法的封装</li><li>withEventData：事件数据的处理</li></ul><p>2、注册第三方插件</p><p><code>register-builtin-modules/index</code> 进行插件批量注册，遍历 <code>plugins</code> 数组，实际是根据插件形式实现 段落、标题、列表、表格等功能，往 edior 对象添加函数</p><p><img src="`+i+'" alt=""></p><p>3、htmlToContent 将传入的 html 转换为 editor.children，传入 content 的优先级高</p><p>接着 normalizeContent 方法规范化 content 数据，如两个相连的 text 合并，减少重复节点</p><p><img src="'+d+'" alt=""></p><p>4、最后实例化 TextArea ，调用 changeViewState 更新视图内容，渲染的步骤可以阅读<a href="https://juejin.cn/post/7324528599779835930#heading-3" target="_blank" rel="noreferrer">基于 slate.js 框架 wangEditor 富文本渲染及源码分析</a>这篇文章</p><h2 id="加粗标记调试" tabindex="-1">加粗标记调试 <a class="header-anchor" href="#加粗标记调试" aria-label="Permalink to &quot;加粗标记调试&quot;">​</a></h2><p>富文本加粗按钮，第一次点击加粗，第二次点击取消加粗，加粗标记实现流程</p><ol><li>鼠标选中文本，触发 <code>selectionchange</code> 事件，将 DOM selection 同步给 <code>slate.section</code>，此时 slate.js 知道选中的文本起始点和终点的范围</li><li>点击工具栏加粗按钮，使用 slate.js API 加粗文本</li></ol><p><img src="'+y+'" alt=""></p><h3 id="selectionchange-选区" tabindex="-1">selectionchange 选区 <a class="header-anchor" href="#selectionchange-选区" aria-label="Permalink to &quot;selectionchange 选区&quot;">​</a></h3><p>搜索 <code>selectionchange</code> 方法，在 onDOMSelectionChange 打上断点</p><p>执行 <code>DOMSelectionToEditor</code> 方法，将 <code>DOM selection</code> 转化为 slate range 选择范围，调用</p><p><code>Transforms.select</code> 选中范围，此时 <code>editor.section</code> 保存了 range 最新的值</p><p><img src="'+D+'" alt=""></p><p>editor.section 是 slate 的选区，包含 <code>anchor 起始点</code> 和 <code>focus 终点</code>，在 slate 用 Point 表示，它又由 Path 和 offset 组成</p><p>例如下面</p><ul><li>anchor: path 路径 [0, 0] 表示第一行第一列，offst 偏移是 3，是在 <code>hello</code> 的 <code>l</code> 起点</li><li>focus： path 路径 [1, 0] 表示第二行第一列，offset 偏移是 5，是在 <code>world</code> 的 <code>d</code> 终点</li></ul><p><img src="'+F+'" alt=""></p><h3 id="加粗按钮" tabindex="-1">加粗按钮 <a class="header-anchor" href="#加粗按钮" aria-label="Permalink to &quot;加粗按钮&quot;">​</a></h3><p>搜索 <code>addMark</code>，在 <code>BaseMenu.prototype.exec</code> 打上断点</p><p>执行 <code>editor.addMark</code> 添加 bold 标记</p><p><img src="'+b+'" alt=""></p><p>addMark 加粗标记，内部会调用 <code>Transforms.setNodes</code> 设置节点，<code>split</code> 参数会根据 <code>match</code> 匹配函数进行切割文本</p><p><img src="'+g+'" alt=""></p><p>不妨继续进入 <code>slate.js</code> 源码看下 Transforms.setNodes 函数的执行，它内部会在 focus 和 anchor 节点位置，分别调用 <code>Transforms.splitNodes</code> 方法进行切割文本</p><p><img src="'+m+`" alt=""></p><p>最后通过调用 <code>editor.apply</code> 方法，在给 <code>[0, 1]</code> 节点设置了 bold 属性，添加标记过程就算完成了</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">editor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">set_node</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">properties</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> properties</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">newProperties</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">bold</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+h+'" alt=""></p><p>wangEditor 是以数据为驱动渲染页面，在更改 editor.children 数据后，会重新渲染</p><p>那怎么触发重新渲染？</p><h3 id="重新渲染" tabindex="-1">重新渲染 <a class="header-anchor" href="#重新渲染" aria-label="Permalink to &quot;重新渲染&quot;">​</a></h3><p>可以在 <code>changeViewState</code> 方法上打上断点，通过函数执行栈找到触发的事件，可以看到执行 apply 方法后，调用了 <code>editor.onChange</code> 方法</p><p><img src="'+u+`" alt=""></p><p>onChange 通过事件派发，执行 changeViewState 重新渲染</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// editor onchange 时更新视图</span></span>
<span class="line"><span style="color:#BABED8;">editor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">change</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">changeViewState</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">this</span><span style="color:#BABED8;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+f+'" alt=""></p><h2 id="疑问" tabindex="-1">疑问 <a class="header-anchor" href="#疑问" aria-label="Permalink to &quot;疑问&quot;">​</a></h2><p>有没有疑问，富文本编辑是使用 div 属性 <code>contenteditable</code> 键盘输入，既然实现了数据驱动渲染，那会不会和 键盘输入的内容产生冲突 ？</p><p>通过阅读源码才知道，有个 <code>beforeinput</code> 事件，<code>event.preventDefault</code> 劫持所有的富文本输入</p><p><img src="'+B+`" alt=""></p><p>输入的内容，使用 slate.js <code>Editor.insertText</code> API 插入文本，这样就实现了直接修改数据后渲染</p><div class="language-JS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">dataTransfer </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">Editor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insertText</span><span style="color:#BABED8;">(editor</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> data)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,78),_=[A];function C(w,j,v,x,k,q){return a(),e("div",null,_)}const S=s(E,[["render",C]]);export{P as __pageData,S as default};
