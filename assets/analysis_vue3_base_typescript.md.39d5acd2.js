import{_ as e,o,c as a,Q as n}from"./chunks/framework.69210375.js";const b=JSON.parse('{"title":"monorepo 代码管理策略","description":"","frontmatter":{},"headers":[],"relativePath":"analysis/vue3/base/typescript.md","lastUpdated":1711638490000}'),r={name:"analysis/vue3/base/typescript.md"},l=n(`<h1 id="monorepo-代码管理策略" tabindex="-1">monorepo 代码管理策略 <a class="header-anchor" href="#monorepo-代码管理策略" aria-label="Permalink to &quot;monorepo 代码管理策略&quot;">​</a></h1><p>Vue3 采用了 <code>monorepo</code> 的方式来对项目代码进行管理，带着以下几个问题去学习</p><ul><li><code>monorepo</code> 代码管理策略是什么？ ——》 了解技术背景和痛点，用它能做什么，解决什么问题</li><li><code>monorepo</code>有哪些优劣势？——》 理解应用场景，避免踩坑</li><li>它在 Vue3 源码是如何实现的？——》真实案例，学习优秀设计，可以在项目造轮子</li></ul><p>明白以上几个问题，就理解了 monorepo 代码管理策略和使用，下面一一分析。</p><h3 id="monorepo-是什么" tabindex="-1">monorepo 是什么？ <a class="header-anchor" href="#monorepo-是什么" aria-label="Permalink to &quot;monorepo 是什么？&quot;">​</a></h3><p>Monorepo（单一代码仓库）是一种代码管理策略，用于将多个相关项目存储在一个共享的代码仓库中。相比于传统的多个独立代码仓库，Monorepo 的目标是提高代码的可共享性、可重用性和协作效率</p><p>简单来说，之前要创建多个项目，需要建多个独立的仓库，代码之间物理隔离，每一个仓库都要重复安装依赖，占用过多内存，代码不能共享，存在种种问题，所以设计出了将多个项目可以集中到一个仓库中</p><h3 id="monorepo-优劣势" tabindex="-1">monorepo 优劣势？ <a class="header-anchor" href="#monorepo-优劣势" aria-label="Permalink to &quot;monorepo 优劣势？&quot;">​</a></h3><p><strong>monorepo 优势</strong></p><p>列举一些 monorepo 在代码管理上优势：</p><ol><li>代码共享和复用：Monorepo 将多个相关项目存储在一个代码仓库中，它们之间可以轻松实现共享，减少重复造轮子，提高开发效率。</li><li>统一版本管理：在 Monorepo 中，所有相关项目共享相同的版本管理，避免了在不同仓库之间出现依赖冲突的问题。同时简化依赖升级和缺陷修复的过程，提高整体代码的稳定性和安全性。</li><li>统一构建和测试：可以使用统一的构建配置和流程，减少配置和维护的工作量。此外，可以在整个 Monorepo 中执行统一的测试流程，确保所有项目质量和稳定性。</li><li>便于协作和开发：在一个代码仓库中，可以更容易地浏览、搜索和理解整个项目的代码，便于团队成员之间的协作。Monorepo 还可以促进跨项目的合作和知识共享，提高团队的整体效率和协同能力。</li><li>更少的内存：多个项目引用相同的依赖，只需要安装一份依赖即可，减少重复安装节省内存空间</li></ol><p><strong>monorepo 劣势</strong></p><p>其实，优势和劣势都是相对的，在一定程度上，如果不遵循约束和规范，优势也会转换为劣势，所以在设计上要更加严谨，这也是学习源码优秀设计的原因之一。</p><ol><li>复杂性和可维护性：由于所有代码都集中在一个仓库中，仓库的大小和复杂度可能会增加，团队成员理解和操作整个 Monorepo 的结构和依赖关系也可能变得更加困难。</li><li>构建时间过长：Monorepo 中的所有代码都需要进行构建过程，这可能会导致整体的构建时间变长。</li><li>团队协作和权限管理：在 Monorepo 中，团队成员需要共享同一个代码仓库，并且对所有模块都具有相同的权限级别。这可能会导致一些团队成员对整个项目的代码和资源具有过多的访问权限，增加了潜在的安全风险。</li><li>代码耦合和影响范围：在 Monorepo 中，一个模块的更改可能会对其他模块产生意外的影响，增加了代码耦合性，并可能导致意外的副作用。</li></ol><h2 id="monorepo-实现方案" tabindex="-1">monorepo 实现方案 <a class="header-anchor" href="#monorepo-实现方案" aria-label="Permalink to &quot;monorepo 实现方案&quot;">​</a></h2><p>monorepo 常见实现方案</p><ul><li>Lerna</li><li>yarn workspace + Lerna</li><li>Lerna + pnpm + workspace</li></ul><h3 id="lerna" tabindex="-1">Lerna <a class="header-anchor" href="#lerna" aria-label="Permalink to &quot;Lerna&quot;">​</a></h3><p><a href="https://lerna.js.org/" target="_blank" rel="noreferrer">Lerna</a> <strong>是什么？</strong></p><ul><li>Lerna 是 Babel 为实现 Monorepo 开发的工具；最擅长管理依赖关系和发布</li><li>Lerna 优化了多包工作流，解决了<strong>多包依赖</strong>、<strong>发版手动维护版本</strong>等问题</li><li>Lerna 不提供构建、测试等任务，工程能力较弱，项目中往往需要基于它进行顶层能力的封装</li></ul><p>详细</p><ul><li>lerna bootstrap：等同于 lerna link + yarn install，用于创建符合链接并安装依赖包；</li><li>lerna run：会像执行一个 for 循环一样，在所有子项目中执行 npm script 脚本，并且，它会非常智能的识别依赖关系，并从根依赖开始执行命令；</li><li>lerna exec：像 lerna run 一样，会按照依赖顺序执行命令，不同的是，它可以执行任何命令，例如 shell 脚本；</li><li>lerna publish：发布代码有变动的 package，因此首先您需要在使用 Lerna 前使用 git commit 命令提交代码，好让 Lerna 有一个 baseline；</li><li>lerna add：将本地或远程的包作为依赖添加至当前的 monorepo 仓库中，该命令让 Lerna 可以识别并追踪包之间的依赖关系，因此非常重要；</li><li>--concurrency <code>&lt;number&gt;</code>：参数可以使 Lerna 利用计算机上的多个核心，并发运行，从而提升构建速度；</li><li>--scope &#39;@mono/{pkg1,pkg2}&#39;：--scope 参数可以指定 Lerna 命令的运行环境，通过使用该参数，Lerna 将不再是一把梭的在所有仓库中执行命令，而是可以精准地在我们所指定的仓库中执行命令，并且还支持示例中的模版语法；</li><li>--stream：该参数可使我们查看 Lerna 运行时的命令执行信息</li></ul><h3 id="pnpm-workspace" tabindex="-1">pnpm workspace <a class="header-anchor" href="#pnpm-workspace" aria-label="Permalink to &quot;pnpm workspace&quot;">​</a></h3><p>Pnpm 是新一代的 nodejs 包管理工具。第一个 “P”意为 Performance，代表着更佳的性能。</p><p>它的主要优点有两个，一是采用了 hard-link 机制，避免了包的重复安装，节省了空间，同时能提高项目依赖的安装速度。二是对 monorepo 的支持非常友好，只需要一条配置就能实现。</p><p><strong>Vue3 源码采用 monorepo 方式进行管理，将众多模块拆分到 packages 目录中</strong></p><p>配置 monorepo</p><p>在项目根目录下新建 pnpm-workspace.yaml 文件</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">  packages:</span></span>
<span class="line"><span style="color:#babed8;">  - &#39;packages/*&#39;</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>意思是，将 packages 目录下所有的目录都作为单独的包进行管理。</p><p>通过这样一个简单的配置，Monorepo 开发环境搭建好了。</p><p><img src="https://files.mdnice.com/user/26477/9c77b56c-04d2-4086-b630-deabe6c933d0.png" alt=""></p><p>这带来的最直观的好处，就是方便管理和维护。而且，它不像 Vue2 那样将源码整体打包对外暴露。Vue3 的这种组织形式，方便的实现了 Tree-shaking，需要哪个功能就引入对应的模块，能大大减少打包后项目的体积</p><h2 id="延展阅读" tabindex="-1">延展阅读 <a class="header-anchor" href="#延展阅读" aria-label="Permalink to &quot;延展阅读&quot;">​</a></h2><ul><li></li></ul>`,35),p=[l];function s(i,t,c,m,d,h){return o(),a("div",null,p)}const g=e(r,[["render",s]]);export{b as __pageData,g as default};
