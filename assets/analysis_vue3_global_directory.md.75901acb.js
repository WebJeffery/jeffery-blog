import{_ as e,o as s,c as a,Q as n}from"./chunks/framework.69210375.js";const l="/jeffery-blog/assets/direction2.185b3630.png",_=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"analysis/vue3/global/directory.md","lastUpdated":1711638490000}'),p={name:"analysis/vue3/global/directory.md"},c=n(`<h2 id="vue3-目录结构" tabindex="-1">Vue3 目录结构 <a class="header-anchor" href="#vue3-目录结构" aria-label="Permalink to &quot;Vue3 目录结构&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">core</span></span>
<span class="line"><span style="color:#babed8;">├── packages             // vue 源码核心包，使用 pnpm workspace 工作区管理</span></span>
<span class="line"><span style="color:#babed8;">│   ├── compiler-core</span></span>
<span class="line"><span style="color:#babed8;">│   ├── compiler-dom</span></span>
<span class="line"><span style="color:#babed8;">│   ├── compiler-sfc</span></span>
<span class="line"><span style="color:#babed8;">│   ├── compiler-ssr</span></span>
<span class="line"><span style="color:#babed8;">│   ├── reactivity</span></span>
<span class="line"><span style="color:#babed8;">│   ├── reactivity-transform</span></span>
<span class="line"><span style="color:#babed8;">│   ├── runtime-core</span></span>
<span class="line"><span style="color:#babed8;">│   ├── runtime-dom</span></span>
<span class="line"><span style="color:#babed8;">│   ├── runtime-test</span></span>
<span class="line"><span style="color:#babed8;">│   ├── server-renderer</span></span>
<span class="line"><span style="color:#babed8;">│   ├── sfc-playground</span></span>
<span class="line"><span style="color:#babed8;">│   ├── shared</span></span>
<span class="line"><span style="color:#babed8;">│   ├── size-check</span></span>
<span class="line"><span style="color:#babed8;">│   ├── template-explorer</span></span>
<span class="line"><span style="color:#babed8;">│   └── vue</span></span>
<span class="line"><span style="color:#babed8;">│   └── vue-compat</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>包功能模块介绍：</p><ul><li><code>compiler-core</code> 编译器（平台无关）: 编译器的基础编译流程：解析模版生成 AST - AST 的节点转换 - 根据 AST 生成代码。在 AST 的节点转换过程中，会执行很多转换插件，compiler-core 则包含所有与平台无关的转换插件。</li><li><code>compiler-dom</code>: 基于 <code>compiler-core</code>，专为浏览器的编译模块，基于 <code>baseCompile</code>，<code>baseParse</code>，重写了 complie、parse</li><li><code>compiler-sfc</code>: 编译 vue 单文件组件，相关 template、script、style 解析相关的代码</li><li><code>compiler-ssr</code>: 服务端渲染编译器，它也是在 compiler-core 基础上进行封装，也依赖了 compiler-dom 提供了一部分辅助转换函数。它包含了专门针对服务端渲染的转换插件</li><li><code>reactivity</code>: vue 独立的响应式模块</li><li><code>runtime-core</code>: 与平台无关的基础模块，有 vue 的各类 API，虚拟 dom 的渲染器，组件实现、和一些全局 API，可以基于它实现特定平台的高阶运行时（自定义渲染器）</li><li><code>runtime-dom</code>: 针对浏览器的 runtime。包含处理原生 DOM API 、属性、样式、事件等处理</li><li><code>runtime-test</code>：一个专门为了测试而写的轻量级 runtime。由于这个 rumtime 「渲染」出的 DOM 树其实是一个 JS 对象，所以这个 runtime 可以用在所有 JS 环境里。你可以用它来测试渲染是否正确。</li><li><code>shared</code>：内部工具库,不暴露 API</li><li><code>size-check</code>：简单应用，用来测试代码体积</li><li><code>template-explorer</code>：用于调试编译器输出的开发工具</li><li><code>vue</code> ：面向公众的完整版本, 包含运行时和编译器</li><li><code>api-extractor.json</code> —— 所有包共享的配置文件。当我们 src 下有多个文件时，打包后会生成多个声明文件。使用 <code>@microsoft/api-extractor</code> 这个库是为了把所有的 <code>.d.ts</code> 合成一个，并且，还是可以根据写的注释自动生成文档。</li><li><code>template-explorer</code>: 用于调试编译器输出的开发工具。您可以运行 npm run dev-compiler，然后执行 npm run open 打开模版编译输出工具，调试编译结果。在线编译网址：<code>vue-next-template-explorer.netlify.app/#</code></li></ul><p><img src="`+l+'" alt=""></p>',5),r=[c];function o(i,t,d,b,m,u){return s(),a("div",null,r)}const v=e(p,[["render",o]]);export{_ as __pageData,v as default};
